* Days
** Day 3
*** Selected Topics
- User Interfaces
*** OOP
- slides
- __hidden, __module___ , __name__ , __bases__ 
- exampleObject.__dict__ makes you see hidden properties but not advisable
- AttributeError 6.1.3.7
 - Check if attribute exists 6.1.3.8
- Introspection & Reflection :
 - __dict__ , getattr() , isinstance() , setattr()
 - make a slim version of 6.1.4.10
- Exception as an object 
- Look for lab example : 6.1.9.17 last lab
*** Files
- Text files
- Employee app
** Day 4
*** Generators
- 
*** Packages
* Lessons
** Exceptions
*** Rehearse
- Talk about the objective of today 
- Slides
- simple example of user_input converting to string
- example from Nimesh
- lab example
** Modules
*** Rehearse
- slides
 - || Reloading a Module || : Demonstrate by example
  - Show the purpose of __name__
- Go to employees app and start coding

*** What is a module
- Teams does not develop code then give it to others as a copy and paste.
** Strings
*** Rehearse
- Slides presentation
- Slicing 5.1.8.7
- Demonstrations
 - Strings are immutable, implement a function to replace an index in string by character.
 - It can be implemented by converting string to list
 - OR it is implemented by oldStr[0:n]+chr+oldStr[n+1:] (ask them to solve it with n=2 hello -> heylo)
- Exhibition: 
 - index() finds index of first occurence. You find all occurences.
  - Hint: use count() alongside index()
  - later: implement it using find()
 - Implement a function like center() in strings 
 - Implement a function that converts string to capital letters
  - Try do it in steps
- Questions: 
 - print("This is it!".replace("is", "are")), replace the word "is" only.
 - Reverse the split() method
*** Other
- Explain slicing progressively
- Exhibition: 
 - Implement the title() method by yourself
** OOP
*** Rehearse
- Dictionary effectively carries attributes for variable
 - likewise, we introduced classes
- Example: Person objects with methods
 - fillDetails(name, age) , saySomething: "my name is ...." 
*** edube
- 1.7: take the example : Max & Cadillac
- 2.3: drawbacks of procedural approach
- 3.8: hasattr()
- List of examples
 - Employee class | EmployeeDB class
** Files
*** Rehearse
- General Presentation on Files
 - what is a file, bin, text
 - Directory structure in Windows vs linux
 - What are File streams or handles and modes
 - Open streams in different modes
 - Errors 
- Work with Files I
 - Open and read all at once 6.1.9.1
 - Open and read character by character 6.1.9.2
 - Open and read line by line readline 6.1.9.4
 - Open and write line 6.1.9.8
- Work with Files II 
 - readlines 6.1.9.5
 - Open() as an iterator over lines 6.1.9.6
 - ByteArray as a container for binary data
  - Each elements takes values 0-255
 - Show what is inside bytearray in hex 6.1.9.10
 - Write a bytearray into bin file 6.1.9.11
 - Read the file using readinto()
 - Read the file using bytearray(buffer.read()) 6.1.9.12
 - Write a program to copy files and test it 
*** Errors
- 6.1.8.11: 
 - Write elif statements for error codes
 - Then introduce the function strerror()
** Generators, List Comprehensions & Closures
*** Rehearse
- List Comprehensions
 - example: input("How old are you") if age > 25 print "You are a man"
  - Do inline if statement
- Generators and Iterators
 - Distinct between function and generator
  - Function returns same thing on different calls, Generators are not
 - Create a Generator as range()
  - def fun(n): return vs def fun(n): yield
  - FYI: it is like static keyword in C programming
 - Make them notice the type of fun()
  - Show them what it does when you run __next__() in sequence
 - example: fibonacci 6.1.7.5
- Lambda
 - Lambda is a keyword imples that you creating a function in one line
 - example : squareFun = lambda x: x**2, then add 6.1.7.10
 - map() the most used function with lambda 6.1.7.12
 - filter() 6.1.7.12
*** Examples
- Lambda
 - example 1:
  - squareFun = lambda x: x**2
  - absFunc = lambda x: x if x >= 0 else -1*x
  - use that function as an argument to another function 
  - def error(lst, lst2, kernel): sum(kernel(lst2-lst))
